// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// InputAchievementTag is an object representing the database table.
type InputAchievementTag struct {
	InputAchievementTagID int       `boil:"input_achievement_tag_id" json:"input_achievement_tag_id" toml:"input_achievement_tag_id" yaml:"input_achievement_tag_id"`
	InputAchievementID    int       `boil:"input_achievement_id" json:"input_achievement_id" toml:"input_achievement_id" yaml:"input_achievement_id"`
	CategoryID            int       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	CreatedBy             int       `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedBy            null.Int  `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedAt            null.Time `boil:"modified_at" json:"modified_at,omitempty" toml:"modified_at" yaml:"modified_at,omitempty"`

	R *inputAchievementTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inputAchievementTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InputAchievementTagColumns = struct {
	InputAchievementTagID string
	InputAchievementID    string
	CategoryID            string
	CreatedBy             string
	CreatedAt             string
	ModifiedBy            string
	ModifiedAt            string
}{
	InputAchievementTagID: "input_achievement_tag_id",
	InputAchievementID:    "input_achievement_id",
	CategoryID:            "category_id",
	CreatedBy:             "created_by",
	CreatedAt:             "created_at",
	ModifiedBy:            "modified_by",
	ModifiedAt:            "modified_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InputAchievementTagWhere = struct {
	InputAchievementTagID whereHelperint
	InputAchievementID    whereHelperint
	CategoryID            whereHelperint
	CreatedBy             whereHelperint
	CreatedAt             whereHelpertime_Time
	ModifiedBy            whereHelpernull_Int
	ModifiedAt            whereHelpernull_Time
}{
	InputAchievementTagID: whereHelperint{field: "`input_achievement_tags`.`input_achievement_tag_id`"},
	InputAchievementID:    whereHelperint{field: "`input_achievement_tags`.`input_achievement_id`"},
	CategoryID:            whereHelperint{field: "`input_achievement_tags`.`category_id`"},
	CreatedBy:             whereHelperint{field: "`input_achievement_tags`.`created_by`"},
	CreatedAt:             whereHelpertime_Time{field: "`input_achievement_tags`.`created_at`"},
	ModifiedBy:            whereHelpernull_Int{field: "`input_achievement_tags`.`modified_by`"},
	ModifiedAt:            whereHelpernull_Time{field: "`input_achievement_tags`.`modified_at`"},
}

// InputAchievementTagRels is where relationship names are stored.
var InputAchievementTagRels = struct {
	InputAchievement string
	Category         string
}{
	InputAchievement: "InputAchievement",
	Category:         "Category",
}

// inputAchievementTagR is where relationships are stored.
type inputAchievementTagR struct {
	InputAchievement *InputAchievement
	Category         *MCategory
}

// NewStruct creates a new relationship struct
func (*inputAchievementTagR) NewStruct() *inputAchievementTagR {
	return &inputAchievementTagR{}
}

// inputAchievementTagL is where Load methods for each relationship are stored.
type inputAchievementTagL struct{}

var (
	inputAchievementTagAllColumns            = []string{"input_achievement_tag_id", "input_achievement_id", "category_id", "created_by", "created_at", "modified_by", "modified_at"}
	inputAchievementTagColumnsWithoutDefault = []string{"input_achievement_id", "category_id", "created_by", "created_at", "modified_by", "modified_at"}
	inputAchievementTagColumnsWithDefault    = []string{"input_achievement_tag_id"}
	inputAchievementTagPrimaryKeyColumns     = []string{"input_achievement_tag_id"}
)

type (
	// InputAchievementTagSlice is an alias for a slice of pointers to InputAchievementTag.
	// This should generally be used opposed to []InputAchievementTag.
	InputAchievementTagSlice []*InputAchievementTag
	// InputAchievementTagHook is the signature for custom InputAchievementTag hook methods
	InputAchievementTagHook func(context.Context, boil.ContextExecutor, *InputAchievementTag) error

	inputAchievementTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inputAchievementTagType                 = reflect.TypeOf(&InputAchievementTag{})
	inputAchievementTagMapping              = queries.MakeStructMapping(inputAchievementTagType)
	inputAchievementTagPrimaryKeyMapping, _ = queries.BindMapping(inputAchievementTagType, inputAchievementTagMapping, inputAchievementTagPrimaryKeyColumns)
	inputAchievementTagInsertCacheMut       sync.RWMutex
	inputAchievementTagInsertCache          = make(map[string]insertCache)
	inputAchievementTagUpdateCacheMut       sync.RWMutex
	inputAchievementTagUpdateCache          = make(map[string]updateCache)
	inputAchievementTagUpsertCacheMut       sync.RWMutex
	inputAchievementTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inputAchievementTagBeforeInsertHooks []InputAchievementTagHook
var inputAchievementTagBeforeUpdateHooks []InputAchievementTagHook
var inputAchievementTagBeforeDeleteHooks []InputAchievementTagHook
var inputAchievementTagBeforeUpsertHooks []InputAchievementTagHook

var inputAchievementTagAfterInsertHooks []InputAchievementTagHook
var inputAchievementTagAfterSelectHooks []InputAchievementTagHook
var inputAchievementTagAfterUpdateHooks []InputAchievementTagHook
var inputAchievementTagAfterDeleteHooks []InputAchievementTagHook
var inputAchievementTagAfterUpsertHooks []InputAchievementTagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InputAchievementTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InputAchievementTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InputAchievementTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InputAchievementTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InputAchievementTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InputAchievementTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InputAchievementTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InputAchievementTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InputAchievementTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInputAchievementTagHook registers your hook function for all future operations.
func AddInputAchievementTagHook(hookPoint boil.HookPoint, inputAchievementTagHook InputAchievementTagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inputAchievementTagBeforeInsertHooks = append(inputAchievementTagBeforeInsertHooks, inputAchievementTagHook)
	case boil.BeforeUpdateHook:
		inputAchievementTagBeforeUpdateHooks = append(inputAchievementTagBeforeUpdateHooks, inputAchievementTagHook)
	case boil.BeforeDeleteHook:
		inputAchievementTagBeforeDeleteHooks = append(inputAchievementTagBeforeDeleteHooks, inputAchievementTagHook)
	case boil.BeforeUpsertHook:
		inputAchievementTagBeforeUpsertHooks = append(inputAchievementTagBeforeUpsertHooks, inputAchievementTagHook)
	case boil.AfterInsertHook:
		inputAchievementTagAfterInsertHooks = append(inputAchievementTagAfterInsertHooks, inputAchievementTagHook)
	case boil.AfterSelectHook:
		inputAchievementTagAfterSelectHooks = append(inputAchievementTagAfterSelectHooks, inputAchievementTagHook)
	case boil.AfterUpdateHook:
		inputAchievementTagAfterUpdateHooks = append(inputAchievementTagAfterUpdateHooks, inputAchievementTagHook)
	case boil.AfterDeleteHook:
		inputAchievementTagAfterDeleteHooks = append(inputAchievementTagAfterDeleteHooks, inputAchievementTagHook)
	case boil.AfterUpsertHook:
		inputAchievementTagAfterUpsertHooks = append(inputAchievementTagAfterUpsertHooks, inputAchievementTagHook)
	}
}

// One returns a single inputAchievementTag record from the query.
func (q inputAchievementTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InputAchievementTag, error) {
	o := &InputAchievementTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for input_achievement_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InputAchievementTag records from the query.
func (q inputAchievementTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (InputAchievementTagSlice, error) {
	var o []*InputAchievementTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InputAchievementTag slice")
	}

	if len(inputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InputAchievementTag records in the query.
func (q inputAchievementTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count input_achievement_tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inputAchievementTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if input_achievement_tags exists")
	}

	return count > 0, nil
}

// InputAchievement pointed to by the foreign key.
func (o *InputAchievementTag) InputAchievement(mods ...qm.QueryMod) inputAchievementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`input_achievement_id` = ?", o.InputAchievementID),
	}

	queryMods = append(queryMods, mods...)

	query := InputAchievements(queryMods...)
	queries.SetFrom(query.Query, "`input_achievements`")

	return query
}

// Category pointed to by the foreign key.
func (o *InputAchievementTag) Category(mods ...qm.QueryMod) mCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`category_id` = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := MCategories(queryMods...)
	queries.SetFrom(query.Query, "`m_categories`")

	return query
}

// LoadInputAchievement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inputAchievementTagL) LoadInputAchievement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInputAchievementTag interface{}, mods queries.Applicator) error {
	var slice []*InputAchievementTag
	var object *InputAchievementTag

	if singular {
		object = maybeInputAchievementTag.(*InputAchievementTag)
	} else {
		slice = *maybeInputAchievementTag.(*[]*InputAchievementTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inputAchievementTagR{}
		}
		args = append(args, object.InputAchievementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inputAchievementTagR{}
			}

			for _, a := range args {
				if a == obj.InputAchievementID {
					continue Outer
				}
			}

			args = append(args, obj.InputAchievementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`input_achievements`), qm.WhereIn(`input_achievements.input_achievement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InputAchievement")
	}

	var resultSlice []*InputAchievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InputAchievement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for input_achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for input_achievements")
	}

	if len(inputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InputAchievement = foreign
		if foreign.R == nil {
			foreign.R = &inputAchievementR{}
		}
		foreign.R.InputAchievementTags = append(foreign.R.InputAchievementTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InputAchievementID == foreign.InputAchievementID {
				local.R.InputAchievement = foreign
				if foreign.R == nil {
					foreign.R = &inputAchievementR{}
				}
				foreign.R.InputAchievementTags = append(foreign.R.InputAchievementTags, local)
				break
			}
		}
	}

	return nil
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inputAchievementTagL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInputAchievementTag interface{}, mods queries.Applicator) error {
	var slice []*InputAchievementTag
	var object *InputAchievementTag

	if singular {
		object = maybeInputAchievementTag.(*InputAchievementTag)
	} else {
		slice = *maybeInputAchievementTag.(*[]*InputAchievementTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inputAchievementTagR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inputAchievementTagR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`m_categories`), qm.WhereIn(`m_categories.category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MCategory")
	}

	var resultSlice []*MCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for m_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_categories")
	}

	if len(inputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &mCategoryR{}
		}
		foreign.R.CategoryInputAchievementTags = append(foreign.R.CategoryInputAchievementTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.CategoryID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &mCategoryR{}
				}
				foreign.R.CategoryInputAchievementTags = append(foreign.R.CategoryInputAchievementTags, local)
				break
			}
		}
	}

	return nil
}

// SetInputAchievement of the inputAchievementTag to the related item.
// Sets o.R.InputAchievement to related.
// Adds o to related.R.InputAchievementTags.
func (o *InputAchievementTag) SetInputAchievement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *InputAchievement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `input_achievement_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"input_achievement_id"}),
		strmangle.WhereClause("`", "`", 0, inputAchievementTagPrimaryKeyColumns),
	)
	values := []interface{}{related.InputAchievementID, o.InputAchievementTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InputAchievementID = related.InputAchievementID
	if o.R == nil {
		o.R = &inputAchievementTagR{
			InputAchievement: related,
		}
	} else {
		o.R.InputAchievement = related
	}

	if related.R == nil {
		related.R = &inputAchievementR{
			InputAchievementTags: InputAchievementTagSlice{o},
		}
	} else {
		related.R.InputAchievementTags = append(related.R.InputAchievementTags, o)
	}

	return nil
}

// SetCategory of the inputAchievementTag to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryInputAchievementTags.
func (o *InputAchievementTag) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `input_achievement_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
		strmangle.WhereClause("`", "`", 0, inputAchievementTagPrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.InputAchievementTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.CategoryID
	if o.R == nil {
		o.R = &inputAchievementTagR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &mCategoryR{
			CategoryInputAchievementTags: InputAchievementTagSlice{o},
		}
	} else {
		related.R.CategoryInputAchievementTags = append(related.R.CategoryInputAchievementTags, o)
	}

	return nil
}

// InputAchievementTags retrieves all the records using an executor.
func InputAchievementTags(mods ...qm.QueryMod) inputAchievementTagQuery {
	mods = append(mods, qm.From("`input_achievement_tags`"))
	return inputAchievementTagQuery{NewQuery(mods...)}
}

// FindInputAchievementTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInputAchievementTag(ctx context.Context, exec boil.ContextExecutor, inputAchievementTagID int, selectCols ...string) (*InputAchievementTag, error) {
	inputAchievementTagObj := &InputAchievementTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `input_achievement_tags` where `input_achievement_tag_id`=?", sel,
	)

	q := queries.Raw(query, inputAchievementTagID)

	err := q.Bind(ctx, exec, inputAchievementTagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from input_achievement_tags")
	}

	return inputAchievementTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InputAchievementTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no input_achievement_tags provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inputAchievementTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inputAchievementTagInsertCacheMut.RLock()
	cache, cached := inputAchievementTagInsertCache[key]
	inputAchievementTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inputAchievementTagAllColumns,
			inputAchievementTagColumnsWithDefault,
			inputAchievementTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inputAchievementTagType, inputAchievementTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inputAchievementTagType, inputAchievementTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `input_achievement_tags` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `input_achievement_tags` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `input_achievement_tags` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inputAchievementTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into input_achievement_tags")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.InputAchievementTagID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == inputAchievementTagMapping["input_achievement_tag_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InputAchievementTagID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for input_achievement_tags")
	}

CacheNoHooks:
	if !cached {
		inputAchievementTagInsertCacheMut.Lock()
		inputAchievementTagInsertCache[key] = cache
		inputAchievementTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InputAchievementTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InputAchievementTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inputAchievementTagUpdateCacheMut.RLock()
	cache, cached := inputAchievementTagUpdateCache[key]
	inputAchievementTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inputAchievementTagAllColumns,
			inputAchievementTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update input_achievement_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `input_achievement_tags` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inputAchievementTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inputAchievementTagType, inputAchievementTagMapping, append(wl, inputAchievementTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update input_achievement_tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for input_achievement_tags")
	}

	if !cached {
		inputAchievementTagUpdateCacheMut.Lock()
		inputAchievementTagUpdateCache[key] = cache
		inputAchievementTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inputAchievementTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for input_achievement_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for input_achievement_tags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InputAchievementTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputAchievementTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `input_achievement_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputAchievementTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inputAchievementTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inputAchievementTag")
	}
	return rowsAff, nil
}

var mySQLInputAchievementTagUniqueColumns = []string{
	"input_achievement_tag_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InputAchievementTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no input_achievement_tags provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inputAchievementTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInputAchievementTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inputAchievementTagUpsertCacheMut.RLock()
	cache, cached := inputAchievementTagUpsertCache[key]
	inputAchievementTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inputAchievementTagAllColumns,
			inputAchievementTagColumnsWithDefault,
			inputAchievementTagColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inputAchievementTagAllColumns,
			inputAchievementTagPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert input_achievement_tags, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "input_achievement_tags", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `input_achievement_tags` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(inputAchievementTagType, inputAchievementTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inputAchievementTagType, inputAchievementTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for input_achievement_tags")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.InputAchievementTagID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == inputAchievementTagMapping["input_achievement_tag_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(inputAchievementTagType, inputAchievementTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for input_achievement_tags")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for input_achievement_tags")
	}

CacheNoHooks:
	if !cached {
		inputAchievementTagUpsertCacheMut.Lock()
		inputAchievementTagUpsertCache[key] = cache
		inputAchievementTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InputAchievementTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InputAchievementTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InputAchievementTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inputAchievementTagPrimaryKeyMapping)
	sql := "DELETE FROM `input_achievement_tags` WHERE `input_achievement_tag_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from input_achievement_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for input_achievement_tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inputAchievementTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inputAchievementTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from input_achievement_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for input_achievement_tags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InputAchievementTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inputAchievementTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputAchievementTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `input_achievement_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputAchievementTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inputAchievementTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for input_achievement_tags")
	}

	if len(inputAchievementTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InputAchievementTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInputAchievementTag(ctx, exec, o.InputAchievementTagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InputAchievementTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InputAchievementTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputAchievementTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `input_achievement_tags`.* FROM `input_achievement_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputAchievementTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InputAchievementTagSlice")
	}

	*o = slice

	return nil
}

// InputAchievementTagExists checks if the InputAchievementTag row exists.
func InputAchievementTagExists(ctx context.Context, exec boil.ContextExecutor, inputAchievementTagID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `input_achievement_tags` where `input_achievement_tag_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inputAchievementTagID)
	}
	row := exec.QueryRowContext(ctx, sql, inputAchievementTagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if input_achievement_tags exists")
	}

	return exists, nil
}
