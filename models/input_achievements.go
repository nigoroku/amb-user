// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// InputAchievement is an object representing the database table.
type InputAchievement struct {
	InputAchievementID int         `boil:"input_achievement_id" json:"input_achievement_id" toml:"input_achievement_id" yaml:"input_achievement_id"`
	UserID             int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ReferenceURL       null.String `boil:"reference_url" json:"reference_url,omitempty" toml:"reference_url" yaml:"reference_url,omitempty"`
	Summary            null.String `boil:"summary" json:"summary,omitempty" toml:"summary" yaml:"summary,omitempty"`
	InputTime          null.Int    `boil:"input_time" json:"input_time,omitempty" toml:"input_time" yaml:"input_time,omitempty"`
	CreatedBy          int         `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedBy         null.Int    `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedAt         null.Time   `boil:"modified_at" json:"modified_at,omitempty" toml:"modified_at" yaml:"modified_at,omitempty"`

	R *inputAchievementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inputAchievementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InputAchievementColumns = struct {
	InputAchievementID string
	UserID             string
	ReferenceURL       string
	Summary            string
	InputTime          string
	CreatedBy          string
	CreatedAt          string
	ModifiedBy         string
	ModifiedAt         string
}{
	InputAchievementID: "input_achievement_id",
	UserID:             "user_id",
	ReferenceURL:       "reference_url",
	Summary:            "summary",
	InputTime:          "input_time",
	CreatedBy:          "created_by",
	CreatedAt:          "created_at",
	ModifiedBy:         "modified_by",
	ModifiedAt:         "modified_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InputAchievementWhere = struct {
	InputAchievementID whereHelperint
	UserID             whereHelperint
	ReferenceURL       whereHelpernull_String
	Summary            whereHelpernull_String
	InputTime          whereHelpernull_Int
	CreatedBy          whereHelperint
	CreatedAt          whereHelpertime_Time
	ModifiedBy         whereHelpernull_Int
	ModifiedAt         whereHelpernull_Time
}{
	InputAchievementID: whereHelperint{field: "`input_achievements`.`input_achievement_id`"},
	UserID:             whereHelperint{field: "`input_achievements`.`user_id`"},
	ReferenceURL:       whereHelpernull_String{field: "`input_achievements`.`reference_url`"},
	Summary:            whereHelpernull_String{field: "`input_achievements`.`summary`"},
	InputTime:          whereHelpernull_Int{field: "`input_achievements`.`input_time`"},
	CreatedBy:          whereHelperint{field: "`input_achievements`.`created_by`"},
	CreatedAt:          whereHelpertime_Time{field: "`input_achievements`.`created_at`"},
	ModifiedBy:         whereHelpernull_Int{field: "`input_achievements`.`modified_by`"},
	ModifiedAt:         whereHelpernull_Time{field: "`input_achievements`.`modified_at`"},
}

// InputAchievementRels is where relationship names are stored.
var InputAchievementRels = struct {
	User                 string
	InputAchievementTags string
}{
	User:                 "User",
	InputAchievementTags: "InputAchievementTags",
}

// inputAchievementR is where relationships are stored.
type inputAchievementR struct {
	User                 *User
	InputAchievementTags InputAchievementTagSlice
}

// NewStruct creates a new relationship struct
func (*inputAchievementR) NewStruct() *inputAchievementR {
	return &inputAchievementR{}
}

// inputAchievementL is where Load methods for each relationship are stored.
type inputAchievementL struct{}

var (
	inputAchievementAllColumns            = []string{"input_achievement_id", "user_id", "reference_url", "summary", "input_time", "created_by", "created_at", "modified_by", "modified_at"}
	inputAchievementColumnsWithoutDefault = []string{"user_id", "reference_url", "summary", "input_time", "created_by", "created_at", "modified_by", "modified_at"}
	inputAchievementColumnsWithDefault    = []string{"input_achievement_id"}
	inputAchievementPrimaryKeyColumns     = []string{"input_achievement_id"}
)

type (
	// InputAchievementSlice is an alias for a slice of pointers to InputAchievement.
	// This should generally be used opposed to []InputAchievement.
	InputAchievementSlice []*InputAchievement
	// InputAchievementHook is the signature for custom InputAchievement hook methods
	InputAchievementHook func(context.Context, boil.ContextExecutor, *InputAchievement) error

	inputAchievementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inputAchievementType                 = reflect.TypeOf(&InputAchievement{})
	inputAchievementMapping              = queries.MakeStructMapping(inputAchievementType)
	inputAchievementPrimaryKeyMapping, _ = queries.BindMapping(inputAchievementType, inputAchievementMapping, inputAchievementPrimaryKeyColumns)
	inputAchievementInsertCacheMut       sync.RWMutex
	inputAchievementInsertCache          = make(map[string]insertCache)
	inputAchievementUpdateCacheMut       sync.RWMutex
	inputAchievementUpdateCache          = make(map[string]updateCache)
	inputAchievementUpsertCacheMut       sync.RWMutex
	inputAchievementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inputAchievementBeforeInsertHooks []InputAchievementHook
var inputAchievementBeforeUpdateHooks []InputAchievementHook
var inputAchievementBeforeDeleteHooks []InputAchievementHook
var inputAchievementBeforeUpsertHooks []InputAchievementHook

var inputAchievementAfterInsertHooks []InputAchievementHook
var inputAchievementAfterSelectHooks []InputAchievementHook
var inputAchievementAfterUpdateHooks []InputAchievementHook
var inputAchievementAfterDeleteHooks []InputAchievementHook
var inputAchievementAfterUpsertHooks []InputAchievementHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InputAchievement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InputAchievement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InputAchievement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InputAchievement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InputAchievement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InputAchievement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InputAchievement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InputAchievement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InputAchievement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inputAchievementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInputAchievementHook registers your hook function for all future operations.
func AddInputAchievementHook(hookPoint boil.HookPoint, inputAchievementHook InputAchievementHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inputAchievementBeforeInsertHooks = append(inputAchievementBeforeInsertHooks, inputAchievementHook)
	case boil.BeforeUpdateHook:
		inputAchievementBeforeUpdateHooks = append(inputAchievementBeforeUpdateHooks, inputAchievementHook)
	case boil.BeforeDeleteHook:
		inputAchievementBeforeDeleteHooks = append(inputAchievementBeforeDeleteHooks, inputAchievementHook)
	case boil.BeforeUpsertHook:
		inputAchievementBeforeUpsertHooks = append(inputAchievementBeforeUpsertHooks, inputAchievementHook)
	case boil.AfterInsertHook:
		inputAchievementAfterInsertHooks = append(inputAchievementAfterInsertHooks, inputAchievementHook)
	case boil.AfterSelectHook:
		inputAchievementAfterSelectHooks = append(inputAchievementAfterSelectHooks, inputAchievementHook)
	case boil.AfterUpdateHook:
		inputAchievementAfterUpdateHooks = append(inputAchievementAfterUpdateHooks, inputAchievementHook)
	case boil.AfterDeleteHook:
		inputAchievementAfterDeleteHooks = append(inputAchievementAfterDeleteHooks, inputAchievementHook)
	case boil.AfterUpsertHook:
		inputAchievementAfterUpsertHooks = append(inputAchievementAfterUpsertHooks, inputAchievementHook)
	}
}

// One returns a single inputAchievement record from the query.
func (q inputAchievementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InputAchievement, error) {
	o := &InputAchievement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for input_achievements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InputAchievement records from the query.
func (q inputAchievementQuery) All(ctx context.Context, exec boil.ContextExecutor) (InputAchievementSlice, error) {
	var o []*InputAchievement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InputAchievement slice")
	}

	if len(inputAchievementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InputAchievement records in the query.
func (q inputAchievementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count input_achievements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inputAchievementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if input_achievements exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *InputAchievement) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// InputAchievementTags retrieves all the input_achievement_tag's InputAchievementTags with an executor.
func (o *InputAchievement) InputAchievementTags(mods ...qm.QueryMod) inputAchievementTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`input_achievement_tags`.`input_achievement_id`=?", o.InputAchievementID),
	)

	query := InputAchievementTags(queryMods...)
	queries.SetFrom(query.Query, "`input_achievement_tags`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`input_achievement_tags`.*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inputAchievementL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInputAchievement interface{}, mods queries.Applicator) error {
	var slice []*InputAchievement
	var object *InputAchievement

	if singular {
		object = maybeInputAchievement.(*InputAchievement)
	} else {
		slice = *maybeInputAchievement.(*[]*InputAchievement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inputAchievementR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inputAchievementR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(inputAchievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.InputAchievements = append(foreign.R.InputAchievements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.InputAchievements = append(foreign.R.InputAchievements, local)
				break
			}
		}
	}

	return nil
}

// LoadInputAchievementTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (inputAchievementL) LoadInputAchievementTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInputAchievement interface{}, mods queries.Applicator) error {
	var slice []*InputAchievement
	var object *InputAchievement

	if singular {
		object = maybeInputAchievement.(*InputAchievement)
	} else {
		slice = *maybeInputAchievement.(*[]*InputAchievement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inputAchievementR{}
		}
		args = append(args, object.InputAchievementID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inputAchievementR{}
			}

			for _, a := range args {
				if a == obj.InputAchievementID {
					continue Outer
				}
			}

			args = append(args, obj.InputAchievementID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`input_achievement_tags`), qm.WhereIn(`input_achievement_tags.input_achievement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load input_achievement_tags")
	}

	var resultSlice []*InputAchievementTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice input_achievement_tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on input_achievement_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for input_achievement_tags")
	}

	if len(inputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InputAchievementTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inputAchievementTagR{}
			}
			foreign.R.InputAchievement = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InputAchievementID == foreign.InputAchievementID {
				local.R.InputAchievementTags = append(local.R.InputAchievementTags, foreign)
				if foreign.R == nil {
					foreign.R = &inputAchievementTagR{}
				}
				foreign.R.InputAchievement = local
				break
			}
		}
	}

	return nil
}

// SetUser of the inputAchievement to the related item.
// Sets o.R.User to related.
// Adds o to related.R.InputAchievements.
func (o *InputAchievement) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `input_achievements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, inputAchievementPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.InputAchievementID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &inputAchievementR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			InputAchievements: InputAchievementSlice{o},
		}
	} else {
		related.R.InputAchievements = append(related.R.InputAchievements, o)
	}

	return nil
}

// AddInputAchievementTags adds the given related objects to the existing relationships
// of the input_achievement, optionally inserting them as new records.
// Appends related to o.R.InputAchievementTags.
// Sets related.R.InputAchievement appropriately.
func (o *InputAchievement) AddInputAchievementTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InputAchievementTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InputAchievementID = o.InputAchievementID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `input_achievement_tags` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"input_achievement_id"}),
				strmangle.WhereClause("`", "`", 0, inputAchievementTagPrimaryKeyColumns),
			)
			values := []interface{}{o.InputAchievementID, rel.InputAchievementTagID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InputAchievementID = o.InputAchievementID
		}
	}

	if o.R == nil {
		o.R = &inputAchievementR{
			InputAchievementTags: related,
		}
	} else {
		o.R.InputAchievementTags = append(o.R.InputAchievementTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inputAchievementTagR{
				InputAchievement: o,
			}
		} else {
			rel.R.InputAchievement = o
		}
	}
	return nil
}

// InputAchievements retrieves all the records using an executor.
func InputAchievements(mods ...qm.QueryMod) inputAchievementQuery {
	mods = append(mods, qm.From("`input_achievements`"))
	return inputAchievementQuery{NewQuery(mods...)}
}

// FindInputAchievement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInputAchievement(ctx context.Context, exec boil.ContextExecutor, inputAchievementID int, selectCols ...string) (*InputAchievement, error) {
	inputAchievementObj := &InputAchievement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `input_achievements` where `input_achievement_id`=?", sel,
	)

	q := queries.Raw(query, inputAchievementID)

	err := q.Bind(ctx, exec, inputAchievementObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from input_achievements")
	}

	return inputAchievementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InputAchievement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no input_achievements provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inputAchievementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inputAchievementInsertCacheMut.RLock()
	cache, cached := inputAchievementInsertCache[key]
	inputAchievementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inputAchievementAllColumns,
			inputAchievementColumnsWithDefault,
			inputAchievementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inputAchievementType, inputAchievementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inputAchievementType, inputAchievementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `input_achievements` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `input_achievements` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `input_achievements` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inputAchievementPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into input_achievements")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.InputAchievementID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == inputAchievementMapping["input_achievement_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InputAchievementID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for input_achievements")
	}

CacheNoHooks:
	if !cached {
		inputAchievementInsertCacheMut.Lock()
		inputAchievementInsertCache[key] = cache
		inputAchievementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InputAchievement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InputAchievement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inputAchievementUpdateCacheMut.RLock()
	cache, cached := inputAchievementUpdateCache[key]
	inputAchievementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inputAchievementAllColumns,
			inputAchievementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update input_achievements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `input_achievements` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inputAchievementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inputAchievementType, inputAchievementMapping, append(wl, inputAchievementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update input_achievements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for input_achievements")
	}

	if !cached {
		inputAchievementUpdateCacheMut.Lock()
		inputAchievementUpdateCache[key] = cache
		inputAchievementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inputAchievementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for input_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for input_achievements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InputAchievementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `input_achievements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputAchievementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inputAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inputAchievement")
	}
	return rowsAff, nil
}

var mySQLInputAchievementUniqueColumns = []string{
	"input_achievement_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InputAchievement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no input_achievements provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inputAchievementColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInputAchievementUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inputAchievementUpsertCacheMut.RLock()
	cache, cached := inputAchievementUpsertCache[key]
	inputAchievementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inputAchievementAllColumns,
			inputAchievementColumnsWithDefault,
			inputAchievementColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inputAchievementAllColumns,
			inputAchievementPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert input_achievements, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "input_achievements", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `input_achievements` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(inputAchievementType, inputAchievementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inputAchievementType, inputAchievementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for input_achievements")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.InputAchievementID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == inputAchievementMapping["input_achievement_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(inputAchievementType, inputAchievementMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for input_achievements")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for input_achievements")
	}

CacheNoHooks:
	if !cached {
		inputAchievementUpsertCacheMut.Lock()
		inputAchievementUpsertCache[key] = cache
		inputAchievementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InputAchievement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InputAchievement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InputAchievement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inputAchievementPrimaryKeyMapping)
	sql := "DELETE FROM `input_achievements` WHERE `input_achievement_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from input_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for input_achievements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inputAchievementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inputAchievementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from input_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for input_achievements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InputAchievementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inputAchievementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `input_achievements` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputAchievementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inputAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for input_achievements")
	}

	if len(inputAchievementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InputAchievement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInputAchievement(ctx, exec, o.InputAchievementID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InputAchievementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InputAchievementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `input_achievements`.* FROM `input_achievements` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputAchievementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InputAchievementSlice")
	}

	*o = slice

	return nil
}

// InputAchievementExists checks if the InputAchievement row exists.
func InputAchievementExists(ctx context.Context, exec boil.ContextExecutor, inputAchievementID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `input_achievements` where `input_achievement_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inputAchievementID)
	}
	row := exec.QueryRowContext(ctx, sql, inputAchievementID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if input_achievements exists")
	}

	return exists, nil
}
