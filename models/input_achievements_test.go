// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInputAchievements(t *testing.T) {
	t.Parallel()

	query := InputAchievements()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInputAchievementsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInputAchievementsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InputAchievements().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInputAchievementsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InputAchievementSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInputAchievementsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InputAchievementExists(ctx, tx, o.InputAchievementID)
	if err != nil {
		t.Errorf("Unable to check if InputAchievement exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InputAchievementExists to return true, but got false.")
	}
}

func testInputAchievementsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	inputAchievementFound, err := FindInputAchievement(ctx, tx, o.InputAchievementID)
	if err != nil {
		t.Error(err)
	}

	if inputAchievementFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInputAchievementsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InputAchievements().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInputAchievementsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InputAchievements().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInputAchievementsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inputAchievementOne := &InputAchievement{}
	inputAchievementTwo := &InputAchievement{}
	if err = randomize.Struct(seed, inputAchievementOne, inputAchievementDBTypes, false, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}
	if err = randomize.Struct(seed, inputAchievementTwo, inputAchievementDBTypes, false, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inputAchievementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inputAchievementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InputAchievements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInputAchievementsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inputAchievementOne := &InputAchievement{}
	inputAchievementTwo := &InputAchievement{}
	if err = randomize.Struct(seed, inputAchievementOne, inputAchievementDBTypes, false, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}
	if err = randomize.Struct(seed, inputAchievementTwo, inputAchievementDBTypes, false, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inputAchievementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inputAchievementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func inputAchievementBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func inputAchievementAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InputAchievement) error {
	*o = InputAchievement{}
	return nil
}

func testInputAchievementsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InputAchievement{}
	o := &InputAchievement{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InputAchievement object: %s", err)
	}

	AddInputAchievementHook(boil.BeforeInsertHook, inputAchievementBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementBeforeInsertHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.AfterInsertHook, inputAchievementAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementAfterInsertHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.AfterSelectHook, inputAchievementAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inputAchievementAfterSelectHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.BeforeUpdateHook, inputAchievementBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inputAchievementBeforeUpdateHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.AfterUpdateHook, inputAchievementAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inputAchievementAfterUpdateHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.BeforeDeleteHook, inputAchievementBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inputAchievementBeforeDeleteHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.AfterDeleteHook, inputAchievementAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inputAchievementAfterDeleteHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.BeforeUpsertHook, inputAchievementBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementBeforeUpsertHooks = []InputAchievementHook{}

	AddInputAchievementHook(boil.AfterUpsertHook, inputAchievementAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inputAchievementAfterUpsertHooks = []InputAchievementHook{}
}

func testInputAchievementsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInputAchievementsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(inputAchievementColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInputAchievementToManyInputAchievementTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InputAchievement
	var b, c InputAchievementTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, inputAchievementTagDBTypes, false, inputAchievementTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inputAchievementTagDBTypes, false, inputAchievementTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.InputAchievementID = a.InputAchievementID
	c.InputAchievementID = a.InputAchievementID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.InputAchievementTags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.InputAchievementID == b.InputAchievementID {
			bFound = true
		}
		if v.InputAchievementID == c.InputAchievementID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InputAchievementSlice{&a}
	if err = a.L.LoadInputAchievementTags(ctx, tx, false, (*[]*InputAchievement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InputAchievementTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InputAchievementTags = nil
	if err = a.L.LoadInputAchievementTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InputAchievementTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testInputAchievementToManyAddOpInputAchievementTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InputAchievement
	var b, c, d, e InputAchievementTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inputAchievementDBTypes, false, strmangle.SetComplement(inputAchievementPrimaryKeyColumns, inputAchievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InputAchievementTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputAchievementTagDBTypes, false, strmangle.SetComplement(inputAchievementTagPrimaryKeyColumns, inputAchievementTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*InputAchievementTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInputAchievementTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InputAchievementID != first.InputAchievementID {
			t.Error("foreign key was wrong value", a.InputAchievementID, first.InputAchievementID)
		}
		if a.InputAchievementID != second.InputAchievementID {
			t.Error("foreign key was wrong value", a.InputAchievementID, second.InputAchievementID)
		}

		if first.R.InputAchievement != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InputAchievement != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InputAchievementTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InputAchievementTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InputAchievementTags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testInputAchievementToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InputAchievement
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inputAchievementDBTypes, false, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := InputAchievementSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*InputAchievement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInputAchievementToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InputAchievement
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inputAchievementDBTypes, false, strmangle.SetComplement(inputAchievementPrimaryKeyColumns, inputAchievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InputAchievements[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testInputAchievementsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInputAchievementsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InputAchievementSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInputAchievementsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InputAchievements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inputAchievementDBTypes = map[string]string{`InputAchievementID`: `int`, `UserID`: `int`, `ReferenceURL`: `varchar`, `Summary`: `varchar`, `OutputTime`: `time`, `CreatedBy`: `int`, `CreatedAt`: `timestamp`, `ModifiedBy`: `int`, `ModifiedAt`: `timestamp`}
	_                       = bytes.MinRead
)

func testInputAchievementsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(inputAchievementPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(inputAchievementAllColumns) == len(inputAchievementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInputAchievementsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inputAchievementAllColumns) == len(inputAchievementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InputAchievement{}
	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inputAchievementDBTypes, true, inputAchievementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inputAchievementAllColumns, inputAchievementPrimaryKeyColumns) {
		fields = inputAchievementAllColumns
	} else {
		fields = strmangle.SetComplement(
			inputAchievementAllColumns,
			inputAchievementPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InputAchievementSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInputAchievementsUpsert(t *testing.T) {
	t.Parallel()

	if len(inputAchievementAllColumns) == len(inputAchievementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLInputAchievementUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InputAchievement{}
	if err = randomize.Struct(seed, &o, inputAchievementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InputAchievement: %s", err)
	}

	count, err := InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, inputAchievementDBTypes, false, inputAchievementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InputAchievement struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InputAchievement: %s", err)
	}

	count, err = InputAchievements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
