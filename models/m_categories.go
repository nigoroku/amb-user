// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MCategory is an object representing the database table.
type MCategory struct {
	CategoryID int         `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	Name       string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ColorCode  null.String `boil:"color_code" json:"color_code,omitempty" toml:"color_code" yaml:"color_code,omitempty"`
	CreatedBy  int         `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedBy null.Int    `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedAt null.Time   `boil:"modified_at" json:"modified_at,omitempty" toml:"modified_at" yaml:"modified_at,omitempty"`

	R *mCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MCategoryColumns = struct {
	CategoryID string
	Name       string
	ColorCode  string
	CreatedBy  string
	CreatedAt  string
	ModifiedBy string
	ModifiedAt string
}{
	CategoryID: "category_id",
	Name:       "name",
	ColorCode:  "color_code",
	CreatedBy:  "created_by",
	CreatedAt:  "created_at",
	ModifiedBy: "modified_by",
	ModifiedAt: "modified_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var MCategoryWhere = struct {
	CategoryID whereHelperint
	Name       whereHelperstring
	ColorCode  whereHelpernull_String
	CreatedBy  whereHelperint
	CreatedAt  whereHelpertime_Time
	ModifiedBy whereHelpernull_Int
	ModifiedAt whereHelpernull_Time
}{
	CategoryID: whereHelperint{field: "`m_categories`.`category_id`"},
	Name:       whereHelperstring{field: "`m_categories`.`name`"},
	ColorCode:  whereHelpernull_String{field: "`m_categories`.`color_code`"},
	CreatedBy:  whereHelperint{field: "`m_categories`.`created_by`"},
	CreatedAt:  whereHelpertime_Time{field: "`m_categories`.`created_at`"},
	ModifiedBy: whereHelpernull_Int{field: "`m_categories`.`modified_by`"},
	ModifiedAt: whereHelpernull_Time{field: "`m_categories`.`modified_at`"},
}

// MCategoryRels is where relationship names are stored.
var MCategoryRels = struct {
	CategoryInputAchievementTags  string
	CategoryOutputAchievementTags string
}{
	CategoryInputAchievementTags:  "CategoryInputAchievementTags",
	CategoryOutputAchievementTags: "CategoryOutputAchievementTags",
}

// mCategoryR is where relationships are stored.
type mCategoryR struct {
	CategoryInputAchievementTags  InputAchievementTagSlice
	CategoryOutputAchievementTags OutputAchievementTagSlice
}

// NewStruct creates a new relationship struct
func (*mCategoryR) NewStruct() *mCategoryR {
	return &mCategoryR{}
}

// mCategoryL is where Load methods for each relationship are stored.
type mCategoryL struct{}

var (
	mCategoryAllColumns            = []string{"category_id", "name", "color_code", "created_by", "created_at", "modified_by", "modified_at"}
	mCategoryColumnsWithoutDefault = []string{"name", "color_code", "created_by", "created_at", "modified_by", "modified_at"}
	mCategoryColumnsWithDefault    = []string{"category_id"}
	mCategoryPrimaryKeyColumns     = []string{"category_id"}
)

type (
	// MCategorySlice is an alias for a slice of pointers to MCategory.
	// This should generally be used opposed to []MCategory.
	MCategorySlice []*MCategory
	// MCategoryHook is the signature for custom MCategory hook methods
	MCategoryHook func(context.Context, boil.ContextExecutor, *MCategory) error

	mCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mCategoryType                 = reflect.TypeOf(&MCategory{})
	mCategoryMapping              = queries.MakeStructMapping(mCategoryType)
	mCategoryPrimaryKeyMapping, _ = queries.BindMapping(mCategoryType, mCategoryMapping, mCategoryPrimaryKeyColumns)
	mCategoryInsertCacheMut       sync.RWMutex
	mCategoryInsertCache          = make(map[string]insertCache)
	mCategoryUpdateCacheMut       sync.RWMutex
	mCategoryUpdateCache          = make(map[string]updateCache)
	mCategoryUpsertCacheMut       sync.RWMutex
	mCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mCategoryBeforeInsertHooks []MCategoryHook
var mCategoryBeforeUpdateHooks []MCategoryHook
var mCategoryBeforeDeleteHooks []MCategoryHook
var mCategoryBeforeUpsertHooks []MCategoryHook

var mCategoryAfterInsertHooks []MCategoryHook
var mCategoryAfterSelectHooks []MCategoryHook
var mCategoryAfterUpdateHooks []MCategoryHook
var mCategoryAfterDeleteHooks []MCategoryHook
var mCategoryAfterUpsertHooks []MCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMCategoryHook registers your hook function for all future operations.
func AddMCategoryHook(hookPoint boil.HookPoint, mCategoryHook MCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mCategoryBeforeInsertHooks = append(mCategoryBeforeInsertHooks, mCategoryHook)
	case boil.BeforeUpdateHook:
		mCategoryBeforeUpdateHooks = append(mCategoryBeforeUpdateHooks, mCategoryHook)
	case boil.BeforeDeleteHook:
		mCategoryBeforeDeleteHooks = append(mCategoryBeforeDeleteHooks, mCategoryHook)
	case boil.BeforeUpsertHook:
		mCategoryBeforeUpsertHooks = append(mCategoryBeforeUpsertHooks, mCategoryHook)
	case boil.AfterInsertHook:
		mCategoryAfterInsertHooks = append(mCategoryAfterInsertHooks, mCategoryHook)
	case boil.AfterSelectHook:
		mCategoryAfterSelectHooks = append(mCategoryAfterSelectHooks, mCategoryHook)
	case boil.AfterUpdateHook:
		mCategoryAfterUpdateHooks = append(mCategoryAfterUpdateHooks, mCategoryHook)
	case boil.AfterDeleteHook:
		mCategoryAfterDeleteHooks = append(mCategoryAfterDeleteHooks, mCategoryHook)
	case boil.AfterUpsertHook:
		mCategoryAfterUpsertHooks = append(mCategoryAfterUpsertHooks, mCategoryHook)
	}
}

// One returns a single mCategory record from the query.
func (q mCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MCategory, error) {
	o := &MCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for m_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MCategory records from the query.
func (q mCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (MCategorySlice, error) {
	var o []*MCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MCategory slice")
	}

	if len(mCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MCategory records in the query.
func (q mCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count m_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if m_categories exists")
	}

	return count > 0, nil
}

// CategoryInputAchievementTags retrieves all the input_achievement_tag's InputAchievementTags with an executor via category_id column.
func (o *MCategory) CategoryInputAchievementTags(mods ...qm.QueryMod) inputAchievementTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`input_achievement_tags`.`category_id`=?", o.CategoryID),
	)

	query := InputAchievementTags(queryMods...)
	queries.SetFrom(query.Query, "`input_achievement_tags`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`input_achievement_tags`.*"})
	}

	return query
}

// CategoryOutputAchievementTags retrieves all the output_achievement_tag's OutputAchievementTags with an executor via category_id column.
func (o *MCategory) CategoryOutputAchievementTags(mods ...qm.QueryMod) outputAchievementTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`output_achievement_tags`.`category_id`=?", o.CategoryID),
	)

	query := OutputAchievementTags(queryMods...)
	queries.SetFrom(query.Query, "`output_achievement_tags`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`output_achievement_tags`.*"})
	}

	return query
}

// LoadCategoryInputAchievementTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mCategoryL) LoadCategoryInputAchievementTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMCategory interface{}, mods queries.Applicator) error {
	var slice []*MCategory
	var object *MCategory

	if singular {
		object = maybeMCategory.(*MCategory)
	} else {
		slice = *maybeMCategory.(*[]*MCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mCategoryR{}
		}
		args = append(args, object.CategoryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mCategoryR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`input_achievement_tags`), qm.WhereIn(`input_achievement_tags.category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load input_achievement_tags")
	}

	var resultSlice []*InputAchievementTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice input_achievement_tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on input_achievement_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for input_achievement_tags")
	}

	if len(inputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryInputAchievementTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inputAchievementTagR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CategoryID == foreign.CategoryID {
				local.R.CategoryInputAchievementTags = append(local.R.CategoryInputAchievementTags, foreign)
				if foreign.R == nil {
					foreign.R = &inputAchievementTagR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryOutputAchievementTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mCategoryL) LoadCategoryOutputAchievementTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMCategory interface{}, mods queries.Applicator) error {
	var slice []*MCategory
	var object *MCategory

	if singular {
		object = maybeMCategory.(*MCategory)
	} else {
		slice = *maybeMCategory.(*[]*MCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mCategoryR{}
		}
		args = append(args, object.CategoryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mCategoryR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`output_achievement_tags`), qm.WhereIn(`output_achievement_tags.category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load output_achievement_tags")
	}

	var resultSlice []*OutputAchievementTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice output_achievement_tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on output_achievement_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for output_achievement_tags")
	}

	if len(outputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryOutputAchievementTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &outputAchievementTagR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CategoryID == foreign.CategoryID {
				local.R.CategoryOutputAchievementTags = append(local.R.CategoryOutputAchievementTags, foreign)
				if foreign.R == nil {
					foreign.R = &outputAchievementTagR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// AddCategoryInputAchievementTags adds the given related objects to the existing relationships
// of the m_category, optionally inserting them as new records.
// Appends related to o.R.CategoryInputAchievementTags.
// Sets related.R.Category appropriately.
func (o *MCategory) AddCategoryInputAchievementTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InputAchievementTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.CategoryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `input_achievement_tags` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
				strmangle.WhereClause("`", "`", 0, inputAchievementTagPrimaryKeyColumns),
			)
			values := []interface{}{o.CategoryID, rel.InputAchievementTagID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.CategoryID
		}
	}

	if o.R == nil {
		o.R = &mCategoryR{
			CategoryInputAchievementTags: related,
		}
	} else {
		o.R.CategoryInputAchievementTags = append(o.R.CategoryInputAchievementTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inputAchievementTagR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// AddCategoryOutputAchievementTags adds the given related objects to the existing relationships
// of the m_category, optionally inserting them as new records.
// Appends related to o.R.CategoryOutputAchievementTags.
// Sets related.R.Category appropriately.
func (o *MCategory) AddCategoryOutputAchievementTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OutputAchievementTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.CategoryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `output_achievement_tags` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
				strmangle.WhereClause("`", "`", 0, outputAchievementTagPrimaryKeyColumns),
			)
			values := []interface{}{o.CategoryID, rel.OutputAchievementTagID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.CategoryID
		}
	}

	if o.R == nil {
		o.R = &mCategoryR{
			CategoryOutputAchievementTags: related,
		}
	} else {
		o.R.CategoryOutputAchievementTags = append(o.R.CategoryOutputAchievementTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outputAchievementTagR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// MCategories retrieves all the records using an executor.
func MCategories(mods ...qm.QueryMod) mCategoryQuery {
	mods = append(mods, qm.From("`m_categories`"))
	return mCategoryQuery{NewQuery(mods...)}
}

// FindMCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMCategory(ctx context.Context, exec boil.ContextExecutor, categoryID int, selectCols ...string) (*MCategory, error) {
	mCategoryObj := &MCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `m_categories` where `category_id`=?", sel,
	)

	q := queries.Raw(query, categoryID)

	err := q.Bind(ctx, exec, mCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from m_categories")
	}

	return mCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no m_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mCategoryInsertCacheMut.RLock()
	cache, cached := mCategoryInsertCache[key]
	mCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mCategoryAllColumns,
			mCategoryColumnsWithDefault,
			mCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mCategoryType, mCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mCategoryType, mCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `m_categories` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `m_categories` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `m_categories` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into m_categories")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CategoryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mCategoryMapping["category_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CategoryID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for m_categories")
	}

CacheNoHooks:
	if !cached {
		mCategoryInsertCacheMut.Lock()
		mCategoryInsertCache[key] = cache
		mCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mCategoryUpdateCacheMut.RLock()
	cache, cached := mCategoryUpdateCache[key]
	mCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mCategoryAllColumns,
			mCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update m_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `m_categories` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mCategoryType, mCategoryMapping, append(wl, mCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update m_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for m_categories")
	}

	if !cached {
		mCategoryUpdateCacheMut.Lock()
		mCategoryUpdateCache[key] = cache
		mCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for m_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for m_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `m_categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mCategory")
	}
	return rowsAff, nil
}

var mySQLMCategoryUniqueColumns = []string{
	"category_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no m_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mCategoryUpsertCacheMut.RLock()
	cache, cached := mCategoryUpsertCache[key]
	mCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mCategoryAllColumns,
			mCategoryColumnsWithDefault,
			mCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mCategoryAllColumns,
			mCategoryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert m_categories, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "m_categories", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `m_categories` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mCategoryType, mCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mCategoryType, mCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for m_categories")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CategoryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mCategoryMapping["category_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mCategoryType, mCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for m_categories")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for m_categories")
	}

CacheNoHooks:
	if !cached {
		mCategoryUpsertCacheMut.Lock()
		mCategoryUpsertCache[key] = cache
		mCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `m_categories` WHERE `category_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from m_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for m_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from m_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for m_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `m_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for m_categories")
	}

	if len(mCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMCategory(ctx, exec, o.CategoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `m_categories`.* FROM `m_categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MCategorySlice")
	}

	*o = slice

	return nil
}

// MCategoryExists checks if the MCategory row exists.
func MCategoryExists(ctx context.Context, exec boil.ContextExecutor, categoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `m_categories` where `category_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, categoryID)
	}
	row := exec.QueryRowContext(ctx, sql, categoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if m_categories exists")
	}

	return exists, nil
}
