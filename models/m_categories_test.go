// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMCategories(t *testing.T) {
	t.Parallel()

	query := MCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MCategoryExists(ctx, tx, o.CategoryID)
	if err != nil {
		t.Errorf("Unable to check if MCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MCategoryExists to return true, but got false.")
	}
}

func testMCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mCategoryFound, err := FindMCategory(ctx, tx, o.CategoryID)
	if err != nil {
		t.Error(err)
	}

	if mCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mCategoryOne := &MCategory{}
	mCategoryTwo := &MCategory{}
	if err = randomize.Struct(seed, mCategoryOne, mCategoryDBTypes, false, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, mCategoryTwo, mCategoryDBTypes, false, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mCategoryOne := &MCategory{}
	mCategoryTwo := &MCategory{}
	if err = randomize.Struct(seed, mCategoryOne, mCategoryDBTypes, false, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, mCategoryTwo, mCategoryDBTypes, false, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func mCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MCategory) error {
	*o = MCategory{}
	return nil
}

func testMCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MCategory{}
	o := &MCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MCategory object: %s", err)
	}

	AddMCategoryHook(boil.BeforeInsertHook, mCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mCategoryBeforeInsertHooks = []MCategoryHook{}

	AddMCategoryHook(boil.AfterInsertHook, mCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mCategoryAfterInsertHooks = []MCategoryHook{}

	AddMCategoryHook(boil.AfterSelectHook, mCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mCategoryAfterSelectHooks = []MCategoryHook{}

	AddMCategoryHook(boil.BeforeUpdateHook, mCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mCategoryBeforeUpdateHooks = []MCategoryHook{}

	AddMCategoryHook(boil.AfterUpdateHook, mCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mCategoryAfterUpdateHooks = []MCategoryHook{}

	AddMCategoryHook(boil.BeforeDeleteHook, mCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mCategoryBeforeDeleteHooks = []MCategoryHook{}

	AddMCategoryHook(boil.AfterDeleteHook, mCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mCategoryAfterDeleteHooks = []MCategoryHook{}

	AddMCategoryHook(boil.BeforeUpsertHook, mCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mCategoryBeforeUpsertHooks = []MCategoryHook{}

	AddMCategoryHook(boil.AfterUpsertHook, mCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mCategoryAfterUpsertHooks = []MCategoryHook{}
}

func testMCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMCategoryToManyCategoryInputAchievementTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MCategory
	var b, c InputAchievementTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, inputAchievementTagDBTypes, false, inputAchievementTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inputAchievementTagDBTypes, false, inputAchievementTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CategoryID = a.CategoryID
	c.CategoryID = a.CategoryID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryInputAchievementTags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CategoryID == b.CategoryID {
			bFound = true
		}
		if v.CategoryID == c.CategoryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MCategorySlice{&a}
	if err = a.L.LoadCategoryInputAchievementTags(ctx, tx, false, (*[]*MCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryInputAchievementTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryInputAchievementTags = nil
	if err = a.L.LoadCategoryInputAchievementTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryInputAchievementTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMCategoryToManyCategoryOutputAchievementTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MCategory
	var b, c OutputAchievementTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CategoryID = a.CategoryID
	c.CategoryID = a.CategoryID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryOutputAchievementTags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CategoryID == b.CategoryID {
			bFound = true
		}
		if v.CategoryID == c.CategoryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MCategorySlice{&a}
	if err = a.L.LoadCategoryOutputAchievementTags(ctx, tx, false, (*[]*MCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryOutputAchievementTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryOutputAchievementTags = nil
	if err = a.L.LoadCategoryOutputAchievementTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryOutputAchievementTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMCategoryToManyAddOpCategoryInputAchievementTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MCategory
	var b, c, d, e InputAchievementTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mCategoryDBTypes, false, strmangle.SetComplement(mCategoryPrimaryKeyColumns, mCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InputAchievementTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inputAchievementTagDBTypes, false, strmangle.SetComplement(inputAchievementTagPrimaryKeyColumns, inputAchievementTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*InputAchievementTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryInputAchievementTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CategoryID != first.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID, first.CategoryID)
		}
		if a.CategoryID != second.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID, second.CategoryID)
		}

		if first.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryInputAchievementTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryInputAchievementTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryInputAchievementTags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMCategoryToManyAddOpCategoryOutputAchievementTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MCategory
	var b, c, d, e OutputAchievementTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mCategoryDBTypes, false, strmangle.SetComplement(mCategoryPrimaryKeyColumns, mCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OutputAchievementTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, outputAchievementTagDBTypes, false, strmangle.SetComplement(outputAchievementTagPrimaryKeyColumns, outputAchievementTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OutputAchievementTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryOutputAchievementTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.CategoryID != first.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID, first.CategoryID)
		}
		if a.CategoryID != second.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID, second.CategoryID)
		}

		if first.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Category != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryOutputAchievementTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryOutputAchievementTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryOutputAchievementTags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mCategoryDBTypes = map[string]string{`CategoryID`: `int`, `Name`: `varchar`, `ColorCode`: `varchar`, `CreatedBy`: `int`, `CreatedAt`: `timestamp`, `ModifiedBy`: `int`, `ModifiedAt`: `timestamp`}
	_                = bytes.MinRead
)

func testMCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mCategoryAllColumns) == len(mCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mCategoryAllColumns) == len(mCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MCategory{}
	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mCategoryDBTypes, true, mCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mCategoryAllColumns, mCategoryPrimaryKeyColumns) {
		fields = mCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			mCategoryAllColumns,
			mCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(mCategoryAllColumns) == len(mCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMCategoryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MCategory{}
	if err = randomize.Struct(seed, &o, mCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MCategory: %s", err)
	}

	count, err := MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mCategoryDBTypes, false, mCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MCategory: %s", err)
	}

	count, err = MCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
