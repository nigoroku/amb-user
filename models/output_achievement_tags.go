// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OutputAchievementTag is an object representing the database table.
type OutputAchievementTag struct {
	OutputAchievementTagID int       `boil:"output_achievement_tag_id" json:"output_achievement_tag_id" toml:"output_achievement_tag_id" yaml:"output_achievement_tag_id"`
	CategoryID             int       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	CreatedBy              int       `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedBy             null.Int  `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedAt             null.Time `boil:"modified_at" json:"modified_at,omitempty" toml:"modified_at" yaml:"modified_at,omitempty"`
	OutputAchievementID    int       `boil:"output_achievement_id" json:"output_achievement_id" toml:"output_achievement_id" yaml:"output_achievement_id"`

	R *outputAchievementTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outputAchievementTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutputAchievementTagColumns = struct {
	OutputAchievementTagID string
	CategoryID             string
	CreatedBy              string
	CreatedAt              string
	ModifiedBy             string
	ModifiedAt             string
	OutputAchievementID    string
}{
	OutputAchievementTagID: "output_achievement_tag_id",
	CategoryID:             "category_id",
	CreatedBy:              "created_by",
	CreatedAt:              "created_at",
	ModifiedBy:             "modified_by",
	ModifiedAt:             "modified_at",
	OutputAchievementID:    "output_achievement_id",
}

// Generated where

var OutputAchievementTagWhere = struct {
	OutputAchievementTagID whereHelperint
	CategoryID             whereHelperint
	CreatedBy              whereHelperint
	CreatedAt              whereHelpertime_Time
	ModifiedBy             whereHelpernull_Int
	ModifiedAt             whereHelpernull_Time
	OutputAchievementID    whereHelperint
}{
	OutputAchievementTagID: whereHelperint{field: "`output_achievement_tags`.`output_achievement_tag_id`"},
	CategoryID:             whereHelperint{field: "`output_achievement_tags`.`category_id`"},
	CreatedBy:              whereHelperint{field: "`output_achievement_tags`.`created_by`"},
	CreatedAt:              whereHelpertime_Time{field: "`output_achievement_tags`.`created_at`"},
	ModifiedBy:             whereHelpernull_Int{field: "`output_achievement_tags`.`modified_by`"},
	ModifiedAt:             whereHelpernull_Time{field: "`output_achievement_tags`.`modified_at`"},
	OutputAchievementID:    whereHelperint{field: "`output_achievement_tags`.`output_achievement_id`"},
}

// OutputAchievementTagRels is where relationship names are stored.
var OutputAchievementTagRels = struct {
	OutputAchievement string
	Category          string
}{
	OutputAchievement: "OutputAchievement",
	Category:          "Category",
}

// outputAchievementTagR is where relationships are stored.
type outputAchievementTagR struct {
	OutputAchievement *OutputAchievement
	Category          *MCategory
}

// NewStruct creates a new relationship struct
func (*outputAchievementTagR) NewStruct() *outputAchievementTagR {
	return &outputAchievementTagR{}
}

// outputAchievementTagL is where Load methods for each relationship are stored.
type outputAchievementTagL struct{}

var (
	outputAchievementTagAllColumns            = []string{"output_achievement_tag_id", "category_id", "created_by", "created_at", "modified_by", "modified_at", "output_achievement_id"}
	outputAchievementTagColumnsWithoutDefault = []string{"category_id", "created_by", "created_at", "modified_by", "modified_at", "output_achievement_id"}
	outputAchievementTagColumnsWithDefault    = []string{"output_achievement_tag_id"}
	outputAchievementTagPrimaryKeyColumns     = []string{"output_achievement_tag_id"}
)

type (
	// OutputAchievementTagSlice is an alias for a slice of pointers to OutputAchievementTag.
	// This should generally be used opposed to []OutputAchievementTag.
	OutputAchievementTagSlice []*OutputAchievementTag
	// OutputAchievementTagHook is the signature for custom OutputAchievementTag hook methods
	OutputAchievementTagHook func(context.Context, boil.ContextExecutor, *OutputAchievementTag) error

	outputAchievementTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outputAchievementTagType                 = reflect.TypeOf(&OutputAchievementTag{})
	outputAchievementTagMapping              = queries.MakeStructMapping(outputAchievementTagType)
	outputAchievementTagPrimaryKeyMapping, _ = queries.BindMapping(outputAchievementTagType, outputAchievementTagMapping, outputAchievementTagPrimaryKeyColumns)
	outputAchievementTagInsertCacheMut       sync.RWMutex
	outputAchievementTagInsertCache          = make(map[string]insertCache)
	outputAchievementTagUpdateCacheMut       sync.RWMutex
	outputAchievementTagUpdateCache          = make(map[string]updateCache)
	outputAchievementTagUpsertCacheMut       sync.RWMutex
	outputAchievementTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var outputAchievementTagBeforeInsertHooks []OutputAchievementTagHook
var outputAchievementTagBeforeUpdateHooks []OutputAchievementTagHook
var outputAchievementTagBeforeDeleteHooks []OutputAchievementTagHook
var outputAchievementTagBeforeUpsertHooks []OutputAchievementTagHook

var outputAchievementTagAfterInsertHooks []OutputAchievementTagHook
var outputAchievementTagAfterSelectHooks []OutputAchievementTagHook
var outputAchievementTagAfterUpdateHooks []OutputAchievementTagHook
var outputAchievementTagAfterDeleteHooks []OutputAchievementTagHook
var outputAchievementTagAfterUpsertHooks []OutputAchievementTagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OutputAchievementTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OutputAchievementTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OutputAchievementTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OutputAchievementTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OutputAchievementTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OutputAchievementTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OutputAchievementTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OutputAchievementTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OutputAchievementTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOutputAchievementTagHook registers your hook function for all future operations.
func AddOutputAchievementTagHook(hookPoint boil.HookPoint, outputAchievementTagHook OutputAchievementTagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		outputAchievementTagBeforeInsertHooks = append(outputAchievementTagBeforeInsertHooks, outputAchievementTagHook)
	case boil.BeforeUpdateHook:
		outputAchievementTagBeforeUpdateHooks = append(outputAchievementTagBeforeUpdateHooks, outputAchievementTagHook)
	case boil.BeforeDeleteHook:
		outputAchievementTagBeforeDeleteHooks = append(outputAchievementTagBeforeDeleteHooks, outputAchievementTagHook)
	case boil.BeforeUpsertHook:
		outputAchievementTagBeforeUpsertHooks = append(outputAchievementTagBeforeUpsertHooks, outputAchievementTagHook)
	case boil.AfterInsertHook:
		outputAchievementTagAfterInsertHooks = append(outputAchievementTagAfterInsertHooks, outputAchievementTagHook)
	case boil.AfterSelectHook:
		outputAchievementTagAfterSelectHooks = append(outputAchievementTagAfterSelectHooks, outputAchievementTagHook)
	case boil.AfterUpdateHook:
		outputAchievementTagAfterUpdateHooks = append(outputAchievementTagAfterUpdateHooks, outputAchievementTagHook)
	case boil.AfterDeleteHook:
		outputAchievementTagAfterDeleteHooks = append(outputAchievementTagAfterDeleteHooks, outputAchievementTagHook)
	case boil.AfterUpsertHook:
		outputAchievementTagAfterUpsertHooks = append(outputAchievementTagAfterUpsertHooks, outputAchievementTagHook)
	}
}

// One returns a single outputAchievementTag record from the query.
func (q outputAchievementTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OutputAchievementTag, error) {
	o := &OutputAchievementTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for output_achievement_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OutputAchievementTag records from the query.
func (q outputAchievementTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (OutputAchievementTagSlice, error) {
	var o []*OutputAchievementTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OutputAchievementTag slice")
	}

	if len(outputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OutputAchievementTag records in the query.
func (q outputAchievementTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count output_achievement_tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q outputAchievementTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if output_achievement_tags exists")
	}

	return count > 0, nil
}

// OutputAchievement pointed to by the foreign key.
func (o *OutputAchievementTag) OutputAchievement(mods ...qm.QueryMod) outputAchievementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`output_achievement_id` = ?", o.OutputAchievementID),
	}

	queryMods = append(queryMods, mods...)

	query := OutputAchievements(queryMods...)
	queries.SetFrom(query.Query, "`output_achievements`")

	return query
}

// Category pointed to by the foreign key.
func (o *OutputAchievementTag) Category(mods ...qm.QueryMod) mCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`category_id` = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := MCategories(queryMods...)
	queries.SetFrom(query.Query, "`m_categories`")

	return query
}

// LoadOutputAchievement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outputAchievementTagL) LoadOutputAchievement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutputAchievementTag interface{}, mods queries.Applicator) error {
	var slice []*OutputAchievementTag
	var object *OutputAchievementTag

	if singular {
		object = maybeOutputAchievementTag.(*OutputAchievementTag)
	} else {
		slice = *maybeOutputAchievementTag.(*[]*OutputAchievementTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outputAchievementTagR{}
		}
		args = append(args, object.OutputAchievementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outputAchievementTagR{}
			}

			for _, a := range args {
				if a == obj.OutputAchievementID {
					continue Outer
				}
			}

			args = append(args, obj.OutputAchievementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`output_achievements`), qm.WhereIn(`output_achievements.output_achievement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OutputAchievement")
	}

	var resultSlice []*OutputAchievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OutputAchievement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for output_achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for output_achievements")
	}

	if len(outputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OutputAchievement = foreign
		if foreign.R == nil {
			foreign.R = &outputAchievementR{}
		}
		foreign.R.OutputAchievementTags = append(foreign.R.OutputAchievementTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OutputAchievementID == foreign.OutputAchievementID {
				local.R.OutputAchievement = foreign
				if foreign.R == nil {
					foreign.R = &outputAchievementR{}
				}
				foreign.R.OutputAchievementTags = append(foreign.R.OutputAchievementTags, local)
				break
			}
		}
	}

	return nil
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outputAchievementTagL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutputAchievementTag interface{}, mods queries.Applicator) error {
	var slice []*OutputAchievementTag
	var object *OutputAchievementTag

	if singular {
		object = maybeOutputAchievementTag.(*OutputAchievementTag)
	} else {
		slice = *maybeOutputAchievementTag.(*[]*OutputAchievementTag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outputAchievementTagR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outputAchievementTagR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`m_categories`), qm.WhereIn(`m_categories.category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MCategory")
	}

	var resultSlice []*MCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for m_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for m_categories")
	}

	if len(outputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &mCategoryR{}
		}
		foreign.R.CategoryOutputAchievementTags = append(foreign.R.CategoryOutputAchievementTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.CategoryID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &mCategoryR{}
				}
				foreign.R.CategoryOutputAchievementTags = append(foreign.R.CategoryOutputAchievementTags, local)
				break
			}
		}
	}

	return nil
}

// SetOutputAchievement of the outputAchievementTag to the related item.
// Sets o.R.OutputAchievement to related.
// Adds o to related.R.OutputAchievementTags.
func (o *OutputAchievementTag) SetOutputAchievement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OutputAchievement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `output_achievement_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"output_achievement_id"}),
		strmangle.WhereClause("`", "`", 0, outputAchievementTagPrimaryKeyColumns),
	)
	values := []interface{}{related.OutputAchievementID, o.OutputAchievementTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OutputAchievementID = related.OutputAchievementID
	if o.R == nil {
		o.R = &outputAchievementTagR{
			OutputAchievement: related,
		}
	} else {
		o.R.OutputAchievement = related
	}

	if related.R == nil {
		related.R = &outputAchievementR{
			OutputAchievementTags: OutputAchievementTagSlice{o},
		}
	} else {
		related.R.OutputAchievementTags = append(related.R.OutputAchievementTags, o)
	}

	return nil
}

// SetCategory of the outputAchievementTag to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryOutputAchievementTags.
func (o *OutputAchievementTag) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `output_achievement_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
		strmangle.WhereClause("`", "`", 0, outputAchievementTagPrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.OutputAchievementTagID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.CategoryID
	if o.R == nil {
		o.R = &outputAchievementTagR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &mCategoryR{
			CategoryOutputAchievementTags: OutputAchievementTagSlice{o},
		}
	} else {
		related.R.CategoryOutputAchievementTags = append(related.R.CategoryOutputAchievementTags, o)
	}

	return nil
}

// OutputAchievementTags retrieves all the records using an executor.
func OutputAchievementTags(mods ...qm.QueryMod) outputAchievementTagQuery {
	mods = append(mods, qm.From("`output_achievement_tags`"))
	return outputAchievementTagQuery{NewQuery(mods...)}
}

// FindOutputAchievementTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutputAchievementTag(ctx context.Context, exec boil.ContextExecutor, outputAchievementTagID int, selectCols ...string) (*OutputAchievementTag, error) {
	outputAchievementTagObj := &OutputAchievementTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `output_achievement_tags` where `output_achievement_tag_id`=?", sel,
	)

	q := queries.Raw(query, outputAchievementTagID)

	err := q.Bind(ctx, exec, outputAchievementTagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from output_achievement_tags")
	}

	return outputAchievementTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OutputAchievementTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no output_achievement_tags provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outputAchievementTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	outputAchievementTagInsertCacheMut.RLock()
	cache, cached := outputAchievementTagInsertCache[key]
	outputAchievementTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			outputAchievementTagAllColumns,
			outputAchievementTagColumnsWithDefault,
			outputAchievementTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(outputAchievementTagType, outputAchievementTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outputAchievementTagType, outputAchievementTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `output_achievement_tags` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `output_achievement_tags` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `output_achievement_tags` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, outputAchievementTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into output_achievement_tags")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OutputAchievementTagID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputAchievementTagMapping["output_achievement_tag_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OutputAchievementTagID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for output_achievement_tags")
	}

CacheNoHooks:
	if !cached {
		outputAchievementTagInsertCacheMut.Lock()
		outputAchievementTagInsertCache[key] = cache
		outputAchievementTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OutputAchievementTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OutputAchievementTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	outputAchievementTagUpdateCacheMut.RLock()
	cache, cached := outputAchievementTagUpdateCache[key]
	outputAchievementTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			outputAchievementTagAllColumns,
			outputAchievementTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update output_achievement_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `output_achievement_tags` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, outputAchievementTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outputAchievementTagType, outputAchievementTagMapping, append(wl, outputAchievementTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update output_achievement_tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for output_achievement_tags")
	}

	if !cached {
		outputAchievementTagUpdateCacheMut.Lock()
		outputAchievementTagUpdateCache[key] = cache
		outputAchievementTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q outputAchievementTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for output_achievement_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for output_achievement_tags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutputAchievementTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `output_achievement_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in outputAchievementTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all outputAchievementTag")
	}
	return rowsAff, nil
}

var mySQLOutputAchievementTagUniqueColumns = []string{
	"output_achievement_tag_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OutputAchievementTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no output_achievement_tags provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outputAchievementTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOutputAchievementTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outputAchievementTagUpsertCacheMut.RLock()
	cache, cached := outputAchievementTagUpsertCache[key]
	outputAchievementTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			outputAchievementTagAllColumns,
			outputAchievementTagColumnsWithDefault,
			outputAchievementTagColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			outputAchievementTagAllColumns,
			outputAchievementTagPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert output_achievement_tags, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "output_achievement_tags", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `output_achievement_tags` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(outputAchievementTagType, outputAchievementTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outputAchievementTagType, outputAchievementTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for output_achievement_tags")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OutputAchievementTagID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputAchievementTagMapping["output_achievement_tag_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(outputAchievementTagType, outputAchievementTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for output_achievement_tags")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for output_achievement_tags")
	}

CacheNoHooks:
	if !cached {
		outputAchievementTagUpsertCacheMut.Lock()
		outputAchievementTagUpsertCache[key] = cache
		outputAchievementTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OutputAchievementTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OutputAchievementTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OutputAchievementTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outputAchievementTagPrimaryKeyMapping)
	sql := "DELETE FROM `output_achievement_tags` WHERE `output_achievement_tag_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from output_achievement_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for output_achievement_tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q outputAchievementTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no outputAchievementTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from output_achievement_tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for output_achievement_tags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutputAchievementTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(outputAchievementTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `output_achievement_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from outputAchievementTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for output_achievement_tags")
	}

	if len(outputAchievementTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OutputAchievementTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOutputAchievementTag(ctx, exec, o.OutputAchievementTagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutputAchievementTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OutputAchievementTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `output_achievement_tags`.* FROM `output_achievement_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OutputAchievementTagSlice")
	}

	*o = slice

	return nil
}

// OutputAchievementTagExists checks if the OutputAchievementTag row exists.
func OutputAchievementTagExists(ctx context.Context, exec boil.ContextExecutor, outputAchievementTagID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `output_achievement_tags` where `output_achievement_tag_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, outputAchievementTagID)
	}
	row := exec.QueryRowContext(ctx, sql, outputAchievementTagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if output_achievement_tags exists")
	}

	return exists, nil
}
