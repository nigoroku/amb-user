// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOutputAchievementTags(t *testing.T) {
	t.Parallel()

	query := OutputAchievementTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOutputAchievementTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutputAchievementTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OutputAchievementTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutputAchievementTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutputAchievementTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutputAchievementTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OutputAchievementTagExists(ctx, tx, o.OutputAchievementTagID)
	if err != nil {
		t.Errorf("Unable to check if OutputAchievementTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OutputAchievementTagExists to return true, but got false.")
	}
}

func testOutputAchievementTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	outputAchievementTagFound, err := FindOutputAchievementTag(ctx, tx, o.OutputAchievementTagID)
	if err != nil {
		t.Error(err)
	}

	if outputAchievementTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOutputAchievementTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OutputAchievementTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOutputAchievementTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OutputAchievementTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOutputAchievementTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	outputAchievementTagOne := &OutputAchievementTag{}
	outputAchievementTagTwo := &OutputAchievementTag{}
	if err = randomize.Struct(seed, outputAchievementTagOne, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}
	if err = randomize.Struct(seed, outputAchievementTagTwo, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outputAchievementTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outputAchievementTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OutputAchievementTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOutputAchievementTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	outputAchievementTagOne := &OutputAchievementTag{}
	outputAchievementTagTwo := &OutputAchievementTag{}
	if err = randomize.Struct(seed, outputAchievementTagOne, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}
	if err = randomize.Struct(seed, outputAchievementTagTwo, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = outputAchievementTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = outputAchievementTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func outputAchievementTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func outputAchievementTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OutputAchievementTag) error {
	*o = OutputAchievementTag{}
	return nil
}

func testOutputAchievementTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OutputAchievementTag{}
	o := &OutputAchievementTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag object: %s", err)
	}

	AddOutputAchievementTagHook(boil.BeforeInsertHook, outputAchievementTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagBeforeInsertHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.AfterInsertHook, outputAchievementTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagAfterInsertHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.AfterSelectHook, outputAchievementTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagAfterSelectHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.BeforeUpdateHook, outputAchievementTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagBeforeUpdateHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.AfterUpdateHook, outputAchievementTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagAfterUpdateHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.BeforeDeleteHook, outputAchievementTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagBeforeDeleteHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.AfterDeleteHook, outputAchievementTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagAfterDeleteHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.BeforeUpsertHook, outputAchievementTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagBeforeUpsertHooks = []OutputAchievementTagHook{}

	AddOutputAchievementTagHook(boil.AfterUpsertHook, outputAchievementTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	outputAchievementTagAfterUpsertHooks = []OutputAchievementTagHook{}
}

func testOutputAchievementTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutputAchievementTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(outputAchievementTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutputAchievementTagToOneOutputAchievementUsingOutputAchievement(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OutputAchievementTag
	var foreign OutputAchievement

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, outputAchievementDBTypes, false, outputAchievementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievement struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OutputAchievementID = foreign.OutputAchievementID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OutputAchievement().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.OutputAchievementID != foreign.OutputAchievementID {
		t.Errorf("want: %v, got %v", foreign.OutputAchievementID, check.OutputAchievementID)
	}

	slice := OutputAchievementTagSlice{&local}
	if err = local.L.LoadOutputAchievement(ctx, tx, false, (*[]*OutputAchievementTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OutputAchievement == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OutputAchievement = nil
	if err = local.L.LoadOutputAchievement(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OutputAchievement == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOutputAchievementTagToOneMCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OutputAchievementTag
	var foreign MCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, outputAchievementTagDBTypes, false, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mCategoryDBTypes, false, mCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.CategoryID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.CategoryID != foreign.CategoryID {
		t.Errorf("want: %v, got %v", foreign.CategoryID, check.CategoryID)
	}

	slice := OutputAchievementTagSlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*OutputAchievementTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOutputAchievementTagToOneSetOpOutputAchievementUsingOutputAchievement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OutputAchievementTag
	var b, c OutputAchievement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outputAchievementTagDBTypes, false, strmangle.SetComplement(outputAchievementTagPrimaryKeyColumns, outputAchievementTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, outputAchievementDBTypes, false, strmangle.SetComplement(outputAchievementPrimaryKeyColumns, outputAchievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, outputAchievementDBTypes, false, strmangle.SetComplement(outputAchievementPrimaryKeyColumns, outputAchievementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OutputAchievement{&b, &c} {
		err = a.SetOutputAchievement(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OutputAchievement != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OutputAchievementTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OutputAchievementID != x.OutputAchievementID {
			t.Error("foreign key was wrong value", a.OutputAchievementID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OutputAchievementID))
		reflect.Indirect(reflect.ValueOf(&a.OutputAchievementID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OutputAchievementID != x.OutputAchievementID {
			t.Error("foreign key was wrong value", a.OutputAchievementID, x.OutputAchievementID)
		}
	}
}
func testOutputAchievementTagToOneSetOpMCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OutputAchievementTag
	var b, c MCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outputAchievementTagDBTypes, false, strmangle.SetComplement(outputAchievementTagPrimaryKeyColumns, outputAchievementTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mCategoryDBTypes, false, strmangle.SetComplement(mCategoryPrimaryKeyColumns, mCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mCategoryDBTypes, false, strmangle.SetComplement(mCategoryPrimaryKeyColumns, mCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MCategory{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryOutputAchievementTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CategoryID != x.CategoryID {
			t.Error("foreign key was wrong value", a.CategoryID, x.CategoryID)
		}
	}
}

func testOutputAchievementTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutputAchievementTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OutputAchievementTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOutputAchievementTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OutputAchievementTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	outputAchievementTagDBTypes = map[string]string{`OutputAchievementTagID`: `int`, `CategoryID`: `int`, `CreatedBy`: `int`, `CreatedAt`: `timestamp`, `ModifiedBy`: `int`, `ModifiedAt`: `timestamp`, `OutputAchievementID`: `int`}
	_                           = bytes.MinRead
)

func testOutputAchievementTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(outputAchievementTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(outputAchievementTagAllColumns) == len(outputAchievementTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOutputAchievementTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(outputAchievementTagAllColumns) == len(outputAchievementTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OutputAchievementTag{}
	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, outputAchievementTagDBTypes, true, outputAchievementTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(outputAchievementTagAllColumns, outputAchievementTagPrimaryKeyColumns) {
		fields = outputAchievementTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			outputAchievementTagAllColumns,
			outputAchievementTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OutputAchievementTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOutputAchievementTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(outputAchievementTagAllColumns) == len(outputAchievementTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLOutputAchievementTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OutputAchievementTag{}
	if err = randomize.Struct(seed, &o, outputAchievementTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OutputAchievementTag: %s", err)
	}

	count, err := OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, outputAchievementTagDBTypes, false, outputAchievementTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OutputAchievementTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OutputAchievementTag: %s", err)
	}

	count, err = OutputAchievementTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
