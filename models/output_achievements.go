// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OutputAchievement is an object representing the database table.
type OutputAchievement struct {
	OutputAchievementID int         `boil:"output_achievement_id" json:"output_achievement_id" toml:"output_achievement_id" yaml:"output_achievement_id"`
	ReferenceURL        null.String `boil:"reference_url" json:"reference_url,omitempty" toml:"reference_url" yaml:"reference_url,omitempty"`
	Summary             null.String `boil:"summary" json:"summary,omitempty" toml:"summary" yaml:"summary,omitempty"`
	CreatedBy           int         `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt           time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedBy          null.Int    `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedAt          null.Time   `boil:"modified_at" json:"modified_at,omitempty" toml:"modified_at" yaml:"modified_at,omitempty"`
	OutputTime          null.Int    `boil:"output_time" json:"output_time,omitempty" toml:"output_time" yaml:"output_time,omitempty"`
	UserID              int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *outputAchievementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outputAchievementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutputAchievementColumns = struct {
	OutputAchievementID string
	ReferenceURL        string
	Summary             string
	CreatedBy           string
	CreatedAt           string
	ModifiedBy          string
	ModifiedAt          string
	OutputTime          string
	UserID              string
}{
	OutputAchievementID: "output_achievement_id",
	ReferenceURL:        "reference_url",
	Summary:             "summary",
	CreatedBy:           "created_by",
	CreatedAt:           "created_at",
	ModifiedBy:          "modified_by",
	ModifiedAt:          "modified_at",
	OutputTime:          "output_time",
	UserID:              "user_id",
}

// Generated where

var OutputAchievementWhere = struct {
	OutputAchievementID whereHelperint
	ReferenceURL        whereHelpernull_String
	Summary             whereHelpernull_String
	CreatedBy           whereHelperint
	CreatedAt           whereHelpertime_Time
	ModifiedBy          whereHelpernull_Int
	ModifiedAt          whereHelpernull_Time
	OutputTime          whereHelpernull_Int
	UserID              whereHelperint
}{
	OutputAchievementID: whereHelperint{field: "`output_achievements`.`output_achievement_id`"},
	ReferenceURL:        whereHelpernull_String{field: "`output_achievements`.`reference_url`"},
	Summary:             whereHelpernull_String{field: "`output_achievements`.`summary`"},
	CreatedBy:           whereHelperint{field: "`output_achievements`.`created_by`"},
	CreatedAt:           whereHelpertime_Time{field: "`output_achievements`.`created_at`"},
	ModifiedBy:          whereHelpernull_Int{field: "`output_achievements`.`modified_by`"},
	ModifiedAt:          whereHelpernull_Time{field: "`output_achievements`.`modified_at`"},
	OutputTime:          whereHelpernull_Int{field: "`output_achievements`.`output_time`"},
	UserID:              whereHelperint{field: "`output_achievements`.`user_id`"},
}

// OutputAchievementRels is where relationship names are stored.
var OutputAchievementRels = struct {
	User                  string
	OutputAchievementTags string
}{
	User:                  "User",
	OutputAchievementTags: "OutputAchievementTags",
}

// outputAchievementR is where relationships are stored.
type outputAchievementR struct {
	User                  *User
	OutputAchievementTags OutputAchievementTagSlice
}

// NewStruct creates a new relationship struct
func (*outputAchievementR) NewStruct() *outputAchievementR {
	return &outputAchievementR{}
}

// outputAchievementL is where Load methods for each relationship are stored.
type outputAchievementL struct{}

var (
	outputAchievementAllColumns            = []string{"output_achievement_id", "reference_url", "summary", "created_by", "created_at", "modified_by", "modified_at", "output_time", "user_id"}
	outputAchievementColumnsWithoutDefault = []string{"reference_url", "summary", "created_by", "created_at", "modified_by", "modified_at", "output_time", "user_id"}
	outputAchievementColumnsWithDefault    = []string{"output_achievement_id"}
	outputAchievementPrimaryKeyColumns     = []string{"output_achievement_id"}
)

type (
	// OutputAchievementSlice is an alias for a slice of pointers to OutputAchievement.
	// This should generally be used opposed to []OutputAchievement.
	OutputAchievementSlice []*OutputAchievement
	// OutputAchievementHook is the signature for custom OutputAchievement hook methods
	OutputAchievementHook func(context.Context, boil.ContextExecutor, *OutputAchievement) error

	outputAchievementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outputAchievementType                 = reflect.TypeOf(&OutputAchievement{})
	outputAchievementMapping              = queries.MakeStructMapping(outputAchievementType)
	outputAchievementPrimaryKeyMapping, _ = queries.BindMapping(outputAchievementType, outputAchievementMapping, outputAchievementPrimaryKeyColumns)
	outputAchievementInsertCacheMut       sync.RWMutex
	outputAchievementInsertCache          = make(map[string]insertCache)
	outputAchievementUpdateCacheMut       sync.RWMutex
	outputAchievementUpdateCache          = make(map[string]updateCache)
	outputAchievementUpsertCacheMut       sync.RWMutex
	outputAchievementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var outputAchievementBeforeInsertHooks []OutputAchievementHook
var outputAchievementBeforeUpdateHooks []OutputAchievementHook
var outputAchievementBeforeDeleteHooks []OutputAchievementHook
var outputAchievementBeforeUpsertHooks []OutputAchievementHook

var outputAchievementAfterInsertHooks []OutputAchievementHook
var outputAchievementAfterSelectHooks []OutputAchievementHook
var outputAchievementAfterUpdateHooks []OutputAchievementHook
var outputAchievementAfterDeleteHooks []OutputAchievementHook
var outputAchievementAfterUpsertHooks []OutputAchievementHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OutputAchievement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OutputAchievement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OutputAchievement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OutputAchievement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OutputAchievement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OutputAchievement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OutputAchievement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OutputAchievement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OutputAchievement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outputAchievementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOutputAchievementHook registers your hook function for all future operations.
func AddOutputAchievementHook(hookPoint boil.HookPoint, outputAchievementHook OutputAchievementHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		outputAchievementBeforeInsertHooks = append(outputAchievementBeforeInsertHooks, outputAchievementHook)
	case boil.BeforeUpdateHook:
		outputAchievementBeforeUpdateHooks = append(outputAchievementBeforeUpdateHooks, outputAchievementHook)
	case boil.BeforeDeleteHook:
		outputAchievementBeforeDeleteHooks = append(outputAchievementBeforeDeleteHooks, outputAchievementHook)
	case boil.BeforeUpsertHook:
		outputAchievementBeforeUpsertHooks = append(outputAchievementBeforeUpsertHooks, outputAchievementHook)
	case boil.AfterInsertHook:
		outputAchievementAfterInsertHooks = append(outputAchievementAfterInsertHooks, outputAchievementHook)
	case boil.AfterSelectHook:
		outputAchievementAfterSelectHooks = append(outputAchievementAfterSelectHooks, outputAchievementHook)
	case boil.AfterUpdateHook:
		outputAchievementAfterUpdateHooks = append(outputAchievementAfterUpdateHooks, outputAchievementHook)
	case boil.AfterDeleteHook:
		outputAchievementAfterDeleteHooks = append(outputAchievementAfterDeleteHooks, outputAchievementHook)
	case boil.AfterUpsertHook:
		outputAchievementAfterUpsertHooks = append(outputAchievementAfterUpsertHooks, outputAchievementHook)
	}
}

// One returns a single outputAchievement record from the query.
func (q outputAchievementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OutputAchievement, error) {
	o := &OutputAchievement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for output_achievements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OutputAchievement records from the query.
func (q outputAchievementQuery) All(ctx context.Context, exec boil.ContextExecutor) (OutputAchievementSlice, error) {
	var o []*OutputAchievement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OutputAchievement slice")
	}

	if len(outputAchievementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OutputAchievement records in the query.
func (q outputAchievementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count output_achievements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q outputAchievementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if output_achievements exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *OutputAchievement) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// OutputAchievementTags retrieves all the output_achievement_tag's OutputAchievementTags with an executor.
func (o *OutputAchievement) OutputAchievementTags(mods ...qm.QueryMod) outputAchievementTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`output_achievement_tags`.`output_achievement_id`=?", o.OutputAchievementID),
	)

	query := OutputAchievementTags(queryMods...)
	queries.SetFrom(query.Query, "`output_achievement_tags`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`output_achievement_tags`.*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outputAchievementL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutputAchievement interface{}, mods queries.Applicator) error {
	var slice []*OutputAchievement
	var object *OutputAchievement

	if singular {
		object = maybeOutputAchievement.(*OutputAchievement)
	} else {
		slice = *maybeOutputAchievement.(*[]*OutputAchievement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outputAchievementR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outputAchievementR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(outputAchievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OutputAchievements = append(foreign.R.OutputAchievements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OutputAchievements = append(foreign.R.OutputAchievements, local)
				break
			}
		}
	}

	return nil
}

// LoadOutputAchievementTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (outputAchievementL) LoadOutputAchievementTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutputAchievement interface{}, mods queries.Applicator) error {
	var slice []*OutputAchievement
	var object *OutputAchievement

	if singular {
		object = maybeOutputAchievement.(*OutputAchievement)
	} else {
		slice = *maybeOutputAchievement.(*[]*OutputAchievement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outputAchievementR{}
		}
		args = append(args, object.OutputAchievementID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outputAchievementR{}
			}

			for _, a := range args {
				if a == obj.OutputAchievementID {
					continue Outer
				}
			}

			args = append(args, obj.OutputAchievementID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`output_achievement_tags`), qm.WhereIn(`output_achievement_tags.output_achievement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load output_achievement_tags")
	}

	var resultSlice []*OutputAchievementTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice output_achievement_tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on output_achievement_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for output_achievement_tags")
	}

	if len(outputAchievementTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OutputAchievementTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &outputAchievementTagR{}
			}
			foreign.R.OutputAchievement = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OutputAchievementID == foreign.OutputAchievementID {
				local.R.OutputAchievementTags = append(local.R.OutputAchievementTags, foreign)
				if foreign.R == nil {
					foreign.R = &outputAchievementTagR{}
				}
				foreign.R.OutputAchievement = local
				break
			}
		}
	}

	return nil
}

// SetUser of the outputAchievement to the related item.
// Sets o.R.User to related.
// Adds o to related.R.OutputAchievements.
func (o *OutputAchievement) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `output_achievements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, outputAchievementPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.OutputAchievementID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &outputAchievementR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			OutputAchievements: OutputAchievementSlice{o},
		}
	} else {
		related.R.OutputAchievements = append(related.R.OutputAchievements, o)
	}

	return nil
}

// AddOutputAchievementTags adds the given related objects to the existing relationships
// of the output_achievement, optionally inserting them as new records.
// Appends related to o.R.OutputAchievementTags.
// Sets related.R.OutputAchievement appropriately.
func (o *OutputAchievement) AddOutputAchievementTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OutputAchievementTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OutputAchievementID = o.OutputAchievementID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `output_achievement_tags` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"output_achievement_id"}),
				strmangle.WhereClause("`", "`", 0, outputAchievementTagPrimaryKeyColumns),
			)
			values := []interface{}{o.OutputAchievementID, rel.OutputAchievementTagID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OutputAchievementID = o.OutputAchievementID
		}
	}

	if o.R == nil {
		o.R = &outputAchievementR{
			OutputAchievementTags: related,
		}
	} else {
		o.R.OutputAchievementTags = append(o.R.OutputAchievementTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outputAchievementTagR{
				OutputAchievement: o,
			}
		} else {
			rel.R.OutputAchievement = o
		}
	}
	return nil
}

// OutputAchievements retrieves all the records using an executor.
func OutputAchievements(mods ...qm.QueryMod) outputAchievementQuery {
	mods = append(mods, qm.From("`output_achievements`"))
	return outputAchievementQuery{NewQuery(mods...)}
}

// FindOutputAchievement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutputAchievement(ctx context.Context, exec boil.ContextExecutor, outputAchievementID int, selectCols ...string) (*OutputAchievement, error) {
	outputAchievementObj := &OutputAchievement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `output_achievements` where `output_achievement_id`=?", sel,
	)

	q := queries.Raw(query, outputAchievementID)

	err := q.Bind(ctx, exec, outputAchievementObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from output_achievements")
	}

	return outputAchievementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OutputAchievement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no output_achievements provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outputAchievementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	outputAchievementInsertCacheMut.RLock()
	cache, cached := outputAchievementInsertCache[key]
	outputAchievementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			outputAchievementAllColumns,
			outputAchievementColumnsWithDefault,
			outputAchievementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(outputAchievementType, outputAchievementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outputAchievementType, outputAchievementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `output_achievements` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `output_achievements` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `output_achievements` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, outputAchievementPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into output_achievements")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OutputAchievementID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputAchievementMapping["output_achievement_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OutputAchievementID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for output_achievements")
	}

CacheNoHooks:
	if !cached {
		outputAchievementInsertCacheMut.Lock()
		outputAchievementInsertCache[key] = cache
		outputAchievementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OutputAchievement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OutputAchievement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	outputAchievementUpdateCacheMut.RLock()
	cache, cached := outputAchievementUpdateCache[key]
	outputAchievementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			outputAchievementAllColumns,
			outputAchievementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update output_achievements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `output_achievements` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, outputAchievementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outputAchievementType, outputAchievementMapping, append(wl, outputAchievementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update output_achievements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for output_achievements")
	}

	if !cached {
		outputAchievementUpdateCacheMut.Lock()
		outputAchievementUpdateCache[key] = cache
		outputAchievementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q outputAchievementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for output_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for output_achievements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutputAchievementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `output_achievements` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in outputAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all outputAchievement")
	}
	return rowsAff, nil
}

var mySQLOutputAchievementUniqueColumns = []string{
	"output_achievement_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OutputAchievement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no output_achievements provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outputAchievementColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOutputAchievementUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outputAchievementUpsertCacheMut.RLock()
	cache, cached := outputAchievementUpsertCache[key]
	outputAchievementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			outputAchievementAllColumns,
			outputAchievementColumnsWithDefault,
			outputAchievementColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			outputAchievementAllColumns,
			outputAchievementPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert output_achievements, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "output_achievements", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `output_achievements` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(outputAchievementType, outputAchievementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outputAchievementType, outputAchievementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for output_achievements")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OutputAchievementID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == outputAchievementMapping["output_achievement_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(outputAchievementType, outputAchievementMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for output_achievements")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for output_achievements")
	}

CacheNoHooks:
	if !cached {
		outputAchievementUpsertCacheMut.Lock()
		outputAchievementUpsertCache[key] = cache
		outputAchievementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OutputAchievement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OutputAchievement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OutputAchievement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outputAchievementPrimaryKeyMapping)
	sql := "DELETE FROM `output_achievements` WHERE `output_achievement_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from output_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for output_achievements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q outputAchievementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no outputAchievementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from output_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for output_achievements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutputAchievementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(outputAchievementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `output_achievements` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from outputAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for output_achievements")
	}

	if len(outputAchievementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OutputAchievement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOutputAchievement(ctx, exec, o.OutputAchievementID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutputAchievementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OutputAchievementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outputAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `output_achievements`.* FROM `output_achievements` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, outputAchievementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OutputAchievementSlice")
	}

	*o = slice

	return nil
}

// OutputAchievementExists checks if the OutputAchievement row exists.
func OutputAchievementExists(ctx context.Context, exec boil.ContextExecutor, outputAchievementID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `output_achievements` where `output_achievement_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, outputAchievementID)
	}
	row := exec.QueryRowContext(ctx, sql, outputAchievementID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if output_achievements exists")
	}

	return exists, nil
}
