// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTodoDetails(t *testing.T) {
	t.Parallel()

	query := TodoDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTodoDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TodoDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodoDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TodoDetailExists(ctx, tx, o.TodoDetailID)
	if err != nil {
		t.Errorf("Unable to check if TodoDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TodoDetailExists to return true, but got false.")
	}
}

func testTodoDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	todoDetailFound, err := FindTodoDetail(ctx, tx, o.TodoDetailID)
	if err != nil {
		t.Error(err)
	}

	if todoDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTodoDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TodoDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTodoDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TodoDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTodoDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	todoDetailOne := &TodoDetail{}
	todoDetailTwo := &TodoDetail{}
	if err = randomize.Struct(seed, todoDetailOne, todoDetailDBTypes, false, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, todoDetailTwo, todoDetailDBTypes, false, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todoDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todoDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodoDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTodoDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	todoDetailOne := &TodoDetail{}
	todoDetailTwo := &TodoDetail{}
	if err = randomize.Struct(seed, todoDetailOne, todoDetailDBTypes, false, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, todoDetailTwo, todoDetailDBTypes, false, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todoDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todoDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func todoDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func todoDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoDetail) error {
	*o = TodoDetail{}
	return nil
}

func testTodoDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TodoDetail{}
	o := &TodoDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, todoDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TodoDetail object: %s", err)
	}

	AddTodoDetailHook(boil.BeforeInsertHook, todoDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	todoDetailBeforeInsertHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.AfterInsertHook, todoDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	todoDetailAfterInsertHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.AfterSelectHook, todoDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	todoDetailAfterSelectHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.BeforeUpdateHook, todoDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	todoDetailBeforeUpdateHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.AfterUpdateHook, todoDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	todoDetailAfterUpdateHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.BeforeDeleteHook, todoDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	todoDetailBeforeDeleteHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.AfterDeleteHook, todoDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	todoDetailAfterDeleteHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.BeforeUpsertHook, todoDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	todoDetailBeforeUpsertHooks = []TodoDetailHook{}

	AddTodoDetailHook(boil.AfterUpsertHook, todoDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	todoDetailAfterUpsertHooks = []TodoDetailHook{}
}

func testTodoDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodoDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(todoDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodoDetailToOneTodoUsingTodo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TodoDetail
	var foreign Todo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, todoDBTypes, false, todoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Todo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TodoID, foreign.TodoID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Todo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.TodoID, foreign.TodoID) {
		t.Errorf("want: %v, got %v", foreign.TodoID, check.TodoID)
	}

	slice := TodoDetailSlice{&local}
	if err = local.L.LoadTodo(ctx, tx, false, (*[]*TodoDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Todo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Todo = nil
	if err = local.L.LoadTodo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Todo == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTodoDetailToOneSetOpTodoUsingTodo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TodoDetail
	var b, c Todo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, todoDetailDBTypes, false, strmangle.SetComplement(todoDetailPrimaryKeyColumns, todoDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, todoDBTypes, false, strmangle.SetComplement(todoPrimaryKeyColumns, todoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, todoDBTypes, false, strmangle.SetComplement(todoPrimaryKeyColumns, todoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Todo{&b, &c} {
		err = a.SetTodo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Todo != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TodoDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TodoID, x.TodoID) {
			t.Error("foreign key was wrong value", a.TodoID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TodoID))
		reflect.Indirect(reflect.ValueOf(&a.TodoID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TodoID, x.TodoID) {
			t.Error("foreign key was wrong value", a.TodoID, x.TodoID)
		}
	}
}

func testTodoDetailToOneRemoveOpTodoUsingTodo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TodoDetail
	var b Todo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, todoDetailDBTypes, false, strmangle.SetComplement(todoDetailPrimaryKeyColumns, todoDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, todoDBTypes, false, strmangle.SetComplement(todoPrimaryKeyColumns, todoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTodo(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTodo(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Todo().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Todo != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TodoID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TodoDetails) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTodoDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodoDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodoDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodoDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodoDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	todoDetailDBTypes = map[string]string{`TodoDetailID`: `int`, `Content`: `text`, `CreatedBy`: `int`, `CreatedAt`: `timestamp`, `Checked`: `tinyint`, `TodoID`: `int`, `ModifiedBy`: `int`, `ModifiedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testTodoDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(todoDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(todoDetailAllColumns) == len(todoDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTodoDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(todoDetailAllColumns) == len(todoDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodoDetail{}
	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todoDetailDBTypes, true, todoDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(todoDetailAllColumns, todoDetailPrimaryKeyColumns) {
		fields = todoDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			todoDetailAllColumns,
			todoDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TodoDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTodoDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(todoDetailAllColumns) == len(todoDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTodoDetailUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TodoDetail{}
	if err = randomize.Struct(seed, &o, todoDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodoDetail: %s", err)
	}

	count, err := TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, todoDetailDBTypes, false, todoDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodoDetail: %s", err)
	}

	count, err = TodoDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
